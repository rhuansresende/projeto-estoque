services:
  postgres:
    image: postgres:15
    container_name: postgres_estoque
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - TZ=America/Sao_Paulo
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  backup:
    build: ../estoque-backup
    container_name: postgres_backup
    depends_on:
      - postgres
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - ENVIRONMENT=${ENVIRONMENT}
      - TZ=America/Sao_Paulo
    volumes:
      - "C:/backups/postgres:/backups"
    restart: always

  backend:
    build: ../estoque-service
    container_name: estoque_service
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILE}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DB}
      - TZ=America/Sao_Paulo
      - JAVA_TOOL_OPTIONS=-Duser.timezone=America/Sao_Paulo
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "${ESTOQUE_SERVICE_PORT}:${ESTOQUE_SERVICE_PORT}"
    restart: unless-stopped

  frontend:
    build: ../estoque-web
    container_name: estoque_web
    environment:
      - API_URL=https://backend:${ESTOQUE_SERVICE_PORT}
      - TZ=America/Sao_Paulo
    ports:
      - "${ESTOQUE_WEB_PORT}:${ESTOQUE_WEB_PORT}"
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres-data:
